[{"/Users/chiragghanghas/Documents/projects/zolve/src/index.js":"1","/Users/chiragghanghas/Documents/projects/zolve/src/App.js":"2","/Users/chiragghanghas/Documents/projects/zolve/src/reportWebVitals.js":"3","/Users/chiragghanghas/Documents/projects/zolve/src/components/Clipboard/index.js":"4","/Users/chiragghanghas/Documents/projects/zolve/src/components/Header/index.js":"5","/Users/chiragghanghas/Documents/projects/zolve/src/components/APIIntegration/index.js":"6","/Users/chiragghanghas/Documents/projects/zolve/src/components/Selfie/index.js":"7"},{"size":500,"mtime":1614658482274,"results":"8","hashOfConfig":"9"},{"size":872,"mtime":1614820152467,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1614658482275,"results":"11","hashOfConfig":"9"},{"size":799,"mtime":1614739229410,"results":"12","hashOfConfig":"9"},{"size":443,"mtime":1614819657164,"results":"13","hashOfConfig":"9"},{"size":3733,"mtime":1614737327321,"results":"14","hashOfConfig":"9"},{"size":3020,"mtime":1614779466523,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"6scp5s",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"/Users/chiragghanghas/Documents/projects/zolve/src/index.js",[],["32","33"],"/Users/chiragghanghas/Documents/projects/zolve/src/App.js",[],"/Users/chiragghanghas/Documents/projects/zolve/src/reportWebVitals.js",[],"/Users/chiragghanghas/Documents/projects/zolve/src/components/Clipboard/index.js",[],"/Users/chiragghanghas/Documents/projects/zolve/src/components/Header/index.js",[],"/Users/chiragghanghas/Documents/projects/zolve/src/components/APIIntegration/index.js",[],"/Users/chiragghanghas/Documents/projects/zolve/src/components/Selfie/index.js",["34"],"import React, { Component } from \"react\";\nimport './style.css';\n\nclass Selfie extends Component {\n    state = {\n        imageURL: '',\n    }\n\n    videoEle = React.createRef();\n    canvasEle = React.createRef();\n    imageEle = React.createRef();\n\n    componentDidMount = async () => {\n        this.startCamera();\n    }\n\n    startCamera = async () => {\n        try {\n            const stream =  await navigator.mediaDevices.getUserMedia({\n                video: true\n            });\n\n            this.videoEle.current.srcObject = stream;\n            \n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n\n    takeSelfie = async () => {\n        // Get the exact size of the video element.\n        const width = this.videoEle.current.videoWidth;\n        const height = this.videoEle.current.videoHeight;\n\n        // get the context object of hidden canvas\n        const ctx = this.canvasEle.current.getContext('2d');\n\n        // Set the canvas to the same dimensions as the video.\n        this.canvasEle.current.width = width;\n        this.canvasEle.current.height = height;\n\n        // Draw the current frame from the video on the canvas.\n        ctx.drawImage(this.videoEle.current, 0, 0, width, height);\n\n        // Get an image dataURL from the canvas.\n        const imageDataURL = this.canvasEle.current.toDataURL('image/png');\n        this.stopCam();\n\n        this.setState({\n            imageURL: imageDataURL\n        })\n    }\n\n    stopCam = () => {\n        const stream = this.videoEle.current.srcObject;\n        const tracks = stream.getTracks();\n        \n        tracks.forEach(track => {\n          track.stop();\n        });\n    }\n\n    backToCam = () => {\n        this.setState({\n            imageURL: ''\n        }, () => {\n            this.startCamera();\n        })\n    }\n\n    \n\n    render() {\n        return (\n            <div className=\"selfie\">\n                {this.state.imageURL === '' && <div className=\"cam\">\n                    <video width=\"100%\" height=\"100%\" className=\"video-player\" autoPlay={true} ref={this.videoEle}></video>\n                    <button className=\"takeApicture\" onClick={this.takeSelfie}>\n                        Capture\n                    </button>\n                </div>\n                }\n\n\n                <canvas ref={this.canvasEle} style={{display: 'none'}}></canvas>\n                {this.state.imageURL !== '' && <div className=\"preview\">\n                    <img className=\"previewImg\" src={this.state.imageURL} ref={this.imageEle} />\n\n                    <div className=\"controlBtns\">\n                        <button className=\"clickAgain\" onClick={this.backToCam}>\n                            Click Again\n                        </button>\n                        <a href={this.state.imageURL} download=\"selfie.png\"\n                        className=\"save\">\n                            Download\n                        </a>\n                    </div>\n\n                </div>\n                }\n\n            </div>\n        )\n    }\n}\n\nexport default Selfie;",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":88,"column":21,"nodeType":"41","endLine":88,"endColumn":97},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]